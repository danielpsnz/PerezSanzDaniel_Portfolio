"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadLinksPreset = void 0;
const tsparticles_move_base_1 = require("tsparticles-move-base");
const tsparticles_shape_circle_1 = require("tsparticles-shape-circle");
const tsparticles_updater_color_1 = require("tsparticles-updater-color");
const tsparticles_updater_opacity_1 = require("tsparticles-updater-opacity");
const tsparticles_updater_out_modes_1 = require("tsparticles-updater-out-modes");
const tsparticles_interaction_particles_links_1 = require("tsparticles-interaction-particles-links");
const tsparticles_updater_size_1 = require("tsparticles-updater-size");
const options_1 = require("./options");
function loadLinksPreset(engine) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, tsparticles_move_base_1.loadBaseMover)(engine);
        yield (0, tsparticles_shape_circle_1.loadCircleShape)(engine);
        yield (0, tsparticles_updater_color_1.loadColorUpdater)(engine);
        yield (0, tsparticles_interaction_particles_links_1.loadParticlesLinksInteraction)(engine);
        yield (0, tsparticles_updater_out_modes_1.loadOutModesUpdater)(engine);
        yield (0, tsparticles_updater_opacity_1.loadOpacityUpdater)(engine);
        yield (0, tsparticles_updater_size_1.loadSizeUpdater)(engine);
        yield engine.addPreset("links", options_1.options);
    });
}
exports.loadLinksPreset = loadLinksPreset;
